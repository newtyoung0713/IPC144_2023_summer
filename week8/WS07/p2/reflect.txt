///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #7
Full Name  : Sheng-Lin Yang
Student ID#: 160443222

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. Were you successful in coding non-repetitive sections 
   of logic in the game play portion of this workshop 
   (drawing of the ruler, board, player position, etc.)? 
   If so, how did you accomplish this (don’t provide your code in your answer)? 
   If not, why? Explain precisely what you struggled with 
   and refer to the logic of the workshop to justify your answer.

Ans:
   After we learn how to use function to reduce some repetitive code block,
   we know if we use functions can help us to make the code less repetitive.
   In this workshop, we do not use function and pointer, only struct.
   Moreover, for the game board, we have print them out twice,
   because of we have to show it before the game and after the game is over.
   Therefore, it is hard for me to make them non-repetitive.

2. Explain how the use of structures simplified your program. 
   Provide proof of your argument by contrasting the alternatives – 
   do not include code in your answer – 
   you must explain in simple terms the impact the concept of structures 
   has in our programming strategies.

Ans:
   If we don't use struct in our program, some of the variables we have to declare many times,
   but if we use struct we can declare once, and use the variables as long as we want.
   Such as we have 100 students' info need to input, then if we don't use struct,
   we have to declare 100 students' variables.
   However, we use struct with array, then we don't need to declare 100 times,
   instead only once, then we can use loop to help us to input 100 students' info.

3. Examine your code and determine the maximum number of levels of nesting (deepest) 
   you ended up using in your program logic. Provide a simple indented outline 
   that illustrates your answer (copy only the construct line 
   for each level and do not include all the code within unless 
   there is another nested construct). 
   For example, two levels of nesting as an outline:

Ans:
   for (i = 0; i < 70; i++) {
      if (i > 10) {
         for (i = 0; i < 70; i++) {
         }
      }
   }