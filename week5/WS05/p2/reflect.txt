///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #5
Full Name  : Sheng-Lin Yang
Student ID#: 160443222

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////


1. Why do we try to use variables and macros to represent information 
   rather than hardcode “magic” numbers (constant literals)? 
   Using the details of this workshop, describe at least three advantages this provides us?

A) 1. When we use mageic number in the program instead of the variables and macros, 
      that will be quickly to code the function at the moment,
      but it will not be easy to find and adjust in the future; 
      however, if we use variables or macros, 
      then changing the value from it is the way faster than magic number.
   2. Maintaining a program with some meaningfully variables and macros are easy
      when we want to change some of them that we can quickly find them by the meanful name, 
      and it will save our time to find and to figure out
      that what is the function doing and how.
      But if we use magic number all the time we figure the program hardly than using a meaningful name.
   3. Making variables with CONST or creating macios that the variables and macros can not change, 
      so when we are coding, we do not need to worry the data will be changing anytime,
      furthermore, if we use meaningful name for the variables and macros in a program,
      that is easy to read and understand what the function is doing.
      Moreover, if we ask someone to help us, a readable program will reduce the time on reading it.

2. The rating values entered by the user required iteration to perform basic validations 
   with each iteration concentrated on testing for values to be within a specific range. 
   Why do we not include additional logic that sums and performs the average? 
   Instead, the sum and average logic is placed outside of any validation routine. 
   Briefly explain two reasons why this is better design and refer to the details of this workshop 
   to justify your answer.

A) 1. If we place the sum and average outside of the iteration the program will be readability,
      and if we want to modify it in the future that the code is found easily.
      But if we put them out of the validation, then we may need more time to get the answer.

   2. If the sum and average put outside of the iteration, 
      and based on the program's function the code, sequence,
      that the program will not be wrong easily,
      and the output more like we want;
      however, if placed variables inside of the iteration,
      the result might be different as we wanted.